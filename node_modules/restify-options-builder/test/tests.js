'use strict';

var request = require( 'supertest-as-promised' );
var restify = require( 'restify' );
var restifyOptionsBuilder = require( '..' );

function createRestifyServer( routeBuilder, options ) {

    var server = restify.createServer( { name: 'test ' } );

    restifyOptionsBuilder( server, options, function( routing ) {

        if( routeBuilder ) {
            routeBuilder( routing );
        }
    } );

    return server;
}

describe( 'restify-options-middleware', function() {

    describe( 'when no verbs registered', function() {
        it( 'should return 404', function() {

            var server = createRestifyServer();

            return request( server )
                .options( '/hello' )
                .expect( 404 )
                .then( function() {
                    server.close();
                } );
        } );
    } );

    describe( 'when single verb registry', function() {
        it( 'should return 204', function() {

            var server = createRestifyServer( function( routing ) {

                routing.get( '/hello', function( req, res, next ) {
                    res.send( 200, 'hello world' );
                    next();
                } );
            } );

            return request( server )
                .options( '/hello' )
                .expect( 204 )
                .expect( 'allow', 'OPTIONS, GET' )
                .then( function() {
                    server.close();
                } );
        } );
    } );

    describe( 'when two verbs registred for same route', function() {
        it( 'should return 204', function() {

            var server = createRestifyServer( function( routing ) {

                routing.get( '/hello', function( req, res, next ) {
                    res.send( 200, 'hello world' );
                    next();
                } );

                routing.head( '/hello', function( req, res, next ) {
                    res.send( 200, 'hello world' );
                    next();
                } );
            } );

            return request( server )
                .options( '/hello' )
                .expect( 204 )
                .expect( 'allow', 'OPTIONS, GET, HEAD' )
                .then( function() {
                    server.close();
                } );
        } );
    } );

    describe( 'when two verbs registred for different routes', function() {
        it( 'should return 204', function() {

            var server = createRestifyServer( function( routing ) {

                routing.get( '/hello', function( req, res, next ) {
                    res.send( 200, 'hello world' );
                    next();
                } );

                routing.head( '/echo', function( req, res, next ) {
                    res.send( 200, 'hello world' );
                    next();
                } );
            } );

            return request( server )
                .options( '/hello' )
                .expect( 204 )
                .expect( 'allow', 'OPTIONS, GET' )
                .then( function() {
                    server.close();
                } );
        } );
    } );

    describe( 'when all verbs registred for same route', function() {
        it( 'should return 204', function() {

            var server = createRestifyServer( function( routing ) {

                function handleRoute( req, res, next ) {
                    res.send( 200, 'hello world' );
                    next();
                };

                routing.get( '/hello', handleRoute );
                routing.head( '/hello', handleRoute );
                routing.post( '/hello', handleRoute );
                routing.patch( '/hello', handleRoute );
                routing.put( '/hello', handleRoute );
                routing.del( '/hello', handleRoute );
            } );

            return request( server )
                .options( '/hello' )
                .expect( 204 )
                .expect( 'allow', 'OPTIONS, GET, HEAD, POST, PATCH, PUT, DELETE' )
                .then( function() {
                    server.close();
                } );
        } );
    } );

    describe( 'when calling original routes', function() {

        var server = createRestifyServer( function( routing ) {

            function handleRoute( req, res, next ) {
                res.send( 200, { method: req.method } );
                next();
            };

            routing.get( '/echo', handleRoute );
            routing.head( '/echo', handleRoute );
            routing.post( '/echo', handleRoute );
            routing.patch( '/echo', handleRoute );
            routing.put( '/echo', handleRoute );
            routing.del( '/echo', handleRoute );
        } );

        after( function() {
            server.close();
        } );

        [ 'DELETE', 'GET', 'POST', 'PUT', 'PATCH' ].forEach( function( method ) {
            describe( 'when ' + method, function() {

                it( 'should return 200', function() {
                    return request( server )[ method.toLowerCase() ]( '/echo' )
                        .expect( 200 )
                        .expect( {
                            method: method
                        } );
                } );
            } );
        } );

        describe( 'when HEAD', function() {

            it( 'should return 200', function() {
                return request( server )
                    .head( '/echo' )
                    .expect( 200 )
                    .expect( '' );
            } );
        } );

    } );

    describe( 'when options.responseHeaders', function() {
        it( 'should return 200', function() {

            var server = createRestifyServer(
                function( routing ) {
                    routing.get( '/responseHeaders', function( req, res, next ) {
                        res.send( 200, 'see response' );
                        next();
                    } );
                },
                {
                    responseHeaders: {
                        'Access-Control-Max-Age': '3600'
                    }
                }
            );

            return request( server )
                .options( '/responseHeaders' )
                .expect( 204 )
                .expect( 'Access-Control-Max-Age', '3600' )
                .then( function() {
                    server.close();
                } );
        } );

    } );

    describe( 'when setAccessControlAllowMethods is truthy', function() {
        describe( 'when using the old incorrect spelling (i.e., acess)', function() {
            it( 'should include correct methods in Access-Control-Allow-Methods', function() {
                var server = createRestifyServer(
                    function( routing ) {
                        routing.del( '/foo', function( req, res, next ) {
                            res.send( 200, 'hello' );
                            next();
                        } );
                    },
                    {
                        setAcessControlAllowMethods: true
                    }
                );

                return request( server )
                    .options( '/foo' )
                    .expect( 204 )
                    .expect( 'Access-Control-Allow-Methods', 'OPTIONS, DELETE' )
                    .then( function() {
                        server.close();
                    } );
            } );
        } );

        describe( 'when using the correct spelling (i.e., access)', function() {
            it( 'should include correct methods in Access-Control-Allow-Methods', function() {
                var server = createRestifyServer(
                    function( routing ) {
                        routing.del( '/foo', function( req, res, next ) {
                            res.send( 200, 'hello' );
                            next();
                        } );
                    },
                    {
                        setAccessControlAllowMethods: true
                    }
                );

                return request( server )
                    .options( '/foo' )
                    .expect( 204 )
                    .expect( 'Access-Control-Allow-Methods', 'OPTIONS, DELETE' )
                    .then( function() {
                        server.close();
                    } );
            } );
        } );
    } );

} );
